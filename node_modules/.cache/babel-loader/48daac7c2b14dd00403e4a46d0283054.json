{"ast":null,"code":"//! pretty-print-json v1.1.0 ~ github.com/center-key/pretty-print-json ~ MIT License\nconst prettyPrintJson = {\n  version: '1.1.0',\n\n  toHtml(thing, options) {\n    const defaults = {\n      indent: 3,\n      linkUrls: true,\n      quoteKeys: false\n    };\n    const settings = { ...defaults,\n      ...options\n    };\n\n    const htmlEntities = text => {\n      return text.replace(/&/g, '&amp;').replace(/\\\\\"/g, '&bsol;&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    };\n\n    const spanTag = (type, display) => display ? '<span class=json-' + type + '>' + display + '</span>' : '';\n\n    const buildValueHtml = value => {\n      const strType = /^\"/.test(value) && 'string';\n      const boolType = ['true', 'false'].includes(value) && 'boolean';\n      const nullType = value === 'null' && 'null';\n      const type = boolType || nullType || strType || 'number';\n      const urlRegex = /https?:\\/\\/[^\\s\"]+/g;\n\n      const makeLink = link => '<a class=json-link href=\"' + link + '\">' + link + '</a>';\n\n      const display = strType && settings.linkUrls ? value.replace(urlRegex, makeLink) : value;\n      return spanTag(type, display);\n    };\n\n    const replacer = (match, p1, p2, p3, p4) => {\n      const part = {\n        indent: p1,\n        key: p2,\n        value: p3,\n        end: p4\n      };\n      const findName = settings.quoteKeys ? /(.*)(): / : /\"([\\w$]+)\": |(.*): /;\n      const indentHtml = part.indent || '';\n      const keyName = part.key && part.key.replace(findName, '$1$2');\n      const keyHtml = part.key ? spanTag('key', keyName) + spanTag('mark', ': ') : '';\n      const valueHtml = part.value ? buildValueHtml(part.value) : '';\n      const endHtml = spanTag('mark', part.end);\n      return indentHtml + keyHtml + valueHtml + endHtml;\n    };\n\n    const jsonLine = /^( *)(\"[^\"]+\": )?(\"[^\"]*\"|[\\w.+-]*)?([{}[\\],]*)?$/mg;\n    const json = JSON.stringify(thing, null, settings.indent) || 'undefined';\n    return htmlEntities(json).replace(jsonLine, replacer);\n  }\n\n};\nexport { prettyPrintJson };","map":{"version":3,"sources":["/home/maram997/resty/node_modules/pretty-print-json/dist/pretty-print-json.js"],"names":["prettyPrintJson","version","toHtml","thing","options","defaults","indent","linkUrls","quoteKeys","settings","htmlEntities","text","replace","spanTag","type","display","buildValueHtml","value","strType","test","boolType","includes","nullType","urlRegex","makeLink","link","replacer","match","p1","p2","p3","p4","part","key","end","findName","indentHtml","keyName","keyHtml","valueHtml","endHtml","jsonLine","json","JSON","stringify"],"mappings":"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","sourcesContent":["//! pretty-print-json v1.1.0 ~ github.com/center-key/pretty-print-json ~ MIT License\n\nconst prettyPrintJson = {\n    version: '1.1.0',\n    toHtml(thing, options) {\n        const defaults = { indent: 3, linkUrls: true, quoteKeys: false };\n        const settings = { ...defaults, ...options };\n        const htmlEntities = (text) => {\n            return text\n                .replace(/&/g, '&amp;')\n                .replace(/\\\\\"/g, '&bsol;&quot;')\n                .replace(/</g, '&lt;')\n                .replace(/>/g, '&gt;');\n        };\n        const spanTag = (type, display) => display ? '<span class=json-' + type + '>' + display + '</span>' : '';\n        const buildValueHtml = (value) => {\n            const strType = /^\"/.test(value) && 'string';\n            const boolType = ['true', 'false'].includes(value) && 'boolean';\n            const nullType = value === 'null' && 'null';\n            const type = boolType || nullType || strType || 'number';\n            const urlRegex = /https?:\\/\\/[^\\s\"]+/g;\n            const makeLink = (link) => '<a class=json-link href=\"' + link + '\">' + link + '</a>';\n            const display = strType && settings.linkUrls ? value.replace(urlRegex, makeLink) : value;\n            return spanTag(type, display);\n        };\n        const replacer = (match, p1, p2, p3, p4) => {\n            const part = { indent: p1, key: p2, value: p3, end: p4 };\n            const findName = settings.quoteKeys ? /(.*)(): / : /\"([\\w$]+)\": |(.*): /;\n            const indentHtml = part.indent || '';\n            const keyName = part.key && part.key.replace(findName, '$1$2');\n            const keyHtml = part.key ? spanTag('key', keyName) + spanTag('mark', ': ') : '';\n            const valueHtml = part.value ? buildValueHtml(part.value) : '';\n            const endHtml = spanTag('mark', part.end);\n            return indentHtml + keyHtml + valueHtml + endHtml;\n        };\n        const jsonLine = /^( *)(\"[^\"]+\": )?(\"[^\"]*\"|[\\w.+-]*)?([{}[\\],]*)?$/mg;\n        const json = JSON.stringify(thing, null, settings.indent) || 'undefined';\n        return htmlEntities(json).replace(jsonLine, replacer);\n    },\n};\nexport { prettyPrintJson };\n"]},"metadata":{},"sourceType":"module"}